name: Deploy Pipeline

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.API_URL }}
          
      - name: Deploy to Vercel
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./frontend
          
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma Client
        run: npm run db:generate
        
      - name: Deploy to Railway
        uses: railwayapp/railway-deploy@v1
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN }}
          service: diy-humanoid-backend
          
      - name: Run database migrations
        run: npm run db:push
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    
    steps:
      - name: Check backend health
        run: |
          for i in {1..10}; do
            if curl -f ${{ secrets.API_URL }}/health; then
              echo "Backend is healthy"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done
          echo "Backend health check failed"
          exit 1
          
      - name: Check frontend availability
        run: |
          for i in {1..5}; do
            if curl -f ${{ secrets.FRONTEND_URL }}; then
              echo "Frontend is available"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 15 seconds..."
            sleep 15
          done
          echo "Frontend availability check failed"
          exit 1
          
  smoke-tests:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: [health-check]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
          
      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./frontend
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        working-directory: ./frontend
        
      - name: Run production smoke tests
        run: npx playwright test --grep="smoke"
        working-directory: ./frontend
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.FRONTEND_URL }}
          API_URL: ${{ secrets.API_URL }}
          
      - name: Upload smoke test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: smoke-test-results
          path: frontend/test-results/
          retention-days: 7