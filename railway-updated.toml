[build]
builder = "NIXPACKS"
buildCommand = "cd backend && npm ci && npm run db:generate"
watchPatterns = ["backend/**"]

[deploy]
startCommand = "cd backend && npm start"
healthcheckPath = "/api/health"
healthcheckTimeout = 300
restartPolicyType = "ON_FAILURE"
restartPolicyMaxRetries = 10

[environments.production]
variables = [
  "NODE_ENV=production",
  "PORT=3001",
  "DATABASE_URL=${{Postgres.DATABASE_URL}}",
  "JWT_SECRET=${{JWT_SECRET}}",
  "JWT_EXPIRES_IN=7d",
  "STRIPE_SECRET_KEY=${{STRIPE_SECRET_KEY}}",
  "STRIPE_PUBLISHABLE_KEY=${{STRIPE_PUBLISHABLE_KEY}}",
  "STRIPE_WEBHOOK_SECRET=${{STRIPE_WEBHOOK_SECRET}}",
  "OPENAI_API_KEY=${{OPENAI_API_KEY}}",
  "OPENAI_MODEL=gpt-4-turbo-preview",
  "SMTP_HOST=${{SMTP_HOST}}",
  "SMTP_PORT=${{SMTP_PORT}}",
  "SMTP_USER=${{SMTP_USER}}",
  "SMTP_PASS=${{SMTP_PASS}}",
  "FROM_EMAIL=${{FROM_EMAIL}}",
  "CORS_ORIGIN=https://diy-humanoid-configurator.vercel.app",
  "CORS_CREDENTIALS=true",
  "LOG_LEVEL=info",
  "SENTRY_DSN=${{SENTRY_DSN}}",
  "SENTRY_ENVIRONMENT=production",
  "CACHE_ENABLED=true",
  "REDIS_URL=${{Redis.REDIS_URL}}",
  "UPLOAD_DIR=/app/uploads",
  "MAX_FILE_SIZE=10485760",
  "RATE_LIMIT_WINDOW_MS=900000",
  "RATE_LIMIT_MAX_REQUESTS=100"
]

[environments.staging]
variables = [
  "NODE_ENV=staging",
  "PORT=3001",
  "DATABASE_URL=${{Postgres.DATABASE_URL}}",
  "JWT_SECRET=${{JWT_SECRET_STAGING}}",
  "STRIPE_SECRET_KEY=${{STRIPE_SECRET_KEY_TEST}}",
  "STRIPE_PUBLISHABLE_KEY=${{STRIPE_PUBLISHABLE_KEY_TEST}}",
  "OPENAI_API_KEY=${{OPENAI_API_KEY}}",
  "CORS_ORIGIN=https://diy-humanoid-configurator-staging.vercel.app",
  "LOG_LEVEL=debug",
  "SENTRY_ENVIRONMENT=staging"
]

[environments.development]
variables = [
  "NODE_ENV=development",
  "DATABASE_URL=${{Postgres.DATABASE_URL}}",
  "JWT_SECRET=dev-secret-key",
  "CORS_ORIGIN=http://localhost:5173",
  "LOG_LEVEL=debug"
]

# Health Check Configuration
[[services]]
name = "healthcheck"
type = "cron"
schedule = "*/5 * * * *"
command = "curl -f http://localhost:3001/api/health || exit 1"

# Database Migration Service
[[services]]
name = "migrate"
type = "oneoff"
command = "cd backend && npm run db:migrate"

# Database Seed Service (nur f√ºr Development/Staging)
[[services]]
name = "seed"
type = "oneoff" 
command = "cd backend && npm run db:seed"

# Backup Service (Production)
[[services]]
name = "backup"
type = "cron"
schedule = "0 2 * * *"
command = "cd backend && npm run db:backup"